{"version":3,"file":"ngx-uploader.es5.js","sources":["ts/ngx-uploader.ts","ts/src/ngx-uploader/module/ngx-uploader.module.ts","ts/src/ngx-uploader/directives/ng-file-drop.directive.ts","ts/src/ngx-uploader/directives/ng-file-select.directive.ts","ts/src/ngx-uploader/classes/ngx-uploader.class.ts","ts/src/ngx-uploader/classes/interfaces.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {NgUploaderModule,humanizeBytes,NgUploaderService,UploaderOptions,BlobFile,UploadStatus,UploadProgress,UploadFile,UploadOutput,UploadInput,NgFileSelectDirective,NgFileDropDirective} from './public_api';\n","import { NgModule } from '@angular/core';\nimport { NgFileDropDirective } from '../directives/ng-file-drop.directive';\nimport { NgFileSelectDirective } from '../directives/ng-file-select.directive';\nexport class NgUploaderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    NgFileSelectDirective,\n    NgFileDropDirective\n  ],\n  exports: [\n    NgFileSelectDirective,\n    NgFileDropDirective\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgUploaderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgUploaderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgUploaderModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy, HostListener } from '@angular/core';\nimport { UploadOutput, UploadInput, UploaderOptions, NgUploaderService } from '../../../';\nimport { Subscription } from 'rxjs/Subscription';\nexport class NgFileDropDirective implements OnInit, OnDestroy {\n   options: UploaderOptions;\n   uploadInput: EventEmitter<UploadInput>;\n   uploadOutput: EventEmitter<UploadOutput>;\n\n  upload: NgUploaderService;\n  el: HTMLInputElement;\n\n  _sub: Subscription[];\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\n    this.uploadOutput = new EventEmitter<UploadOutput>();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._sub = [];\n    const /** @type {?} */ concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n    const /** @type {?} */ allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n    this.upload = new NgUploaderService(concurrency, allowedContentTypes);\n\n    this.el = this.elementRef.nativeElement;\n\n    this._sub.push(\n      this.upload.serviceEvents.subscribe((event: UploadOutput) => {\n        this.uploadOutput.emit(event);\n      })\n    );\n\n    if (this.uploadInput instanceof EventEmitter) {\n      this._sub.push(this.upload.initInputEvents(this.uploadInput));\n    }\n\n    this.el.addEventListener('drop', this.stopEvent, false);\n    this.el.addEventListener('dragenter', this.stopEvent, false);\n    this.el.addEventListener('dragover', this.stopEvent, false);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._sub.forEach(sub => sub.unsubscribe());\n  }\n\n  stopEvent = (e: Event) => {\n    e.stopPropagation();\n    e.preventDefault();\n  }\n/**\n * @param {?} e\n * @return {?}\n */\npublic onDrop(e: any) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const /** @type {?} */ event: UploadOutput = { type: 'drop' };\n    this.uploadOutput.emit(event);\n    this.upload.handleFiles(e.dataTransfer.files);\n  }\n/**\n * @param {?} e\n * @return {?}\n */\npublic onDragOver(e: Event) {\n    if (!e) {\n      return;\n    }\n\n    const /** @type {?} */ event: UploadOutput = { type: 'dragOver' };\n    this.uploadOutput.emit(event);\n  }\n/**\n * @param {?} e\n * @return {?}\n */\npublic onDragLeave(e: Event) {\n    if (!e) {\n      return;\n    }\n\n    const /** @type {?} */ event: UploadOutput = { type: 'dragOut' };\n    this.uploadOutput.emit(event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngFileDrop]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'uploadInput': [{ type: Input },],\n'uploadOutput': [{ type: Output },],\n'onDrop': [{ type: HostListener, args: ['drop', ['$event'], ] },],\n'onDragOver': [{ type: HostListener, args: ['dragover', ['$event'], ] },],\n'onDragLeave': [{ type: HostListener, args: ['dragleave', ['$event'], ] },],\n};\n}\n\nfunction NgFileDropDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNgFileDropDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgFileDropDirective.ctorParameters;\n/** @type {?} */\nNgFileDropDirective.propDecorators;\n/** @type {?} */\nNgFileDropDirective.prototype.options;\n/** @type {?} */\nNgFileDropDirective.prototype.uploadInput;\n/** @type {?} */\nNgFileDropDirective.prototype.uploadOutput;\n/** @type {?} */\nNgFileDropDirective.prototype.upload;\n/** @type {?} */\nNgFileDropDirective.prototype.el;\n/** @type {?} */\nNgFileDropDirective.prototype._sub;\n/** @type {?} */\nNgFileDropDirective.prototype.stopEvent;\n/** @type {?} */\nNgFileDropDirective.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy } from '@angular/core';\nimport { UploadOutput, UploaderOptions, NgUploaderService } from '../../../';\nimport { Subscription } from 'rxjs/Subscription';\nexport class NgFileSelectDirective implements OnInit, OnDestroy {\n   options: UploaderOptions;\n   uploadInput: EventEmitter<any>;\n   uploadOutput: EventEmitter<UploadOutput>;\n\n  upload: NgUploaderService;\n  el: HTMLInputElement;\n\n  _sub: Subscription[];\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\n    this.uploadOutput = new EventEmitter<UploadOutput>();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._sub = [];\n    const /** @type {?} */ concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n    const /** @type {?} */ allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n    this.upload = new NgUploaderService(concurrency, allowedContentTypes);\n\n    this.el = this.elementRef.nativeElement;\n    this.el.addEventListener('change', this.fileListener, false);\n\n    this._sub.push(\n      this.upload.serviceEvents.subscribe((event: UploadOutput) => {\n        this.uploadOutput.emit(event);\n      })\n    );\n\n    if (this.uploadInput instanceof EventEmitter) {\n      this._sub.push(this.upload.initInputEvents(this.uploadInput));\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.el.removeEventListener('change', this.fileListener, false);\n    this._sub.forEach(sub => sub.unsubscribe());\n  }\n\n  fileListener = () => {\n    if (this.el.files) {\n      this.upload.handleFiles(this.el.files);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngFileSelect]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'uploadInput': [{ type: Input },],\n'uploadOutput': [{ type: Output },],\n};\n}\n\nfunction NgFileSelectDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNgFileSelectDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgFileSelectDirective.ctorParameters;\n/** @type {?} */\nNgFileSelectDirective.propDecorators;\n/** @type {?} */\nNgFileSelectDirective.prototype.options;\n/** @type {?} */\nNgFileSelectDirective.prototype.uploadInput;\n/** @type {?} */\nNgFileSelectDirective.prototype.uploadOutput;\n/** @type {?} */\nNgFileSelectDirective.prototype.upload;\n/** @type {?} */\nNgFileSelectDirective.prototype.el;\n/** @type {?} */\nNgFileSelectDirective.prototype._sub;\n/** @type {?} */\nNgFileSelectDirective.prototype.fileListener;\n/** @type {?} */\nNgFileSelectDirective.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport'rxjs/add/operator/mergeMap';\nimport { UploadFile, UploadOutput, UploadInput, UploadStatus, BlobFile } from './interfaces';\n/**\n * @param {?} bytes\n * @return {?}\n */\nexport function humanizeBytes(bytes: number): string {\n  if (bytes === 0) {\n    return '0 Byte';\n  }\n\n  const /** @type {?} */ k = 1024;\n  const /** @type {?} */ sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n  const /** @type {?} */ i: number = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\nexport class NgUploaderService {\n  queue: UploadFile[];\n  serviceEvents: EventEmitter<UploadOutput>;\n  uploadScheduler: Subject<{ file: UploadFile, event: UploadInput }>;\n  subs: { id: string, sub: Subscription }[];\n  contentTypes: string[];\n/**\n * @param {?=} concurrency\n * @param {?=} contentTypes\n */\nconstructor(concurrency: number = Number.POSITIVE_INFINITY, contentTypes: string[] = ['*']) {\n    this.queue = [];\n    this.serviceEvents = new EventEmitter<any>();\n    this.uploadScheduler = new Subject();\n    this.subs = [];\n    this.contentTypes = contentTypes;\n\n    this.uploadScheduler\n      .mergeMap(upload => this.startUpload(upload), concurrency)\n      .subscribe(uploadOutput => this.serviceEvents.emit(uploadOutput));\n  }\n/**\n * @param {?} incomingFiles\n * @return {?}\n */\nhandleFiles(incomingFiles: FileList): void {\n    const /** @type {?} */ allowedIncomingFiles: File[] = [].reduce.call(incomingFiles, (acc: File[], checkFile: File, i: number) => {\n      if (this.isContentTypeAllowed(checkFile.type)) {\n        acc = acc.concat(checkFile);\n      } else {\n        const /** @type {?} */ rejectedFile: UploadFile = this.makeUploadFile(checkFile, i);\n        this.serviceEvents.emit({ type: 'rejected', file: rejectedFile });\n      }\n\n      return acc;\n    }, []);\n\n    this.queue.push(...[].map.call(allowedIncomingFiles, (file: File, i: number) => {\n      const /** @type {?} */ uploadFile: UploadFile = this.makeUploadFile(file, i);\n      this.serviceEvents.emit({ type: 'addedToQueue', file: uploadFile });\n      return uploadFile;\n    }));\n\n    this.serviceEvents.emit({ type: 'allAddedToQueue' });\n  }\n/**\n * @param {?} input\n * @return {?}\n */\ninitInputEvents(input: EventEmitter<UploadInput>): Subscription {\n    return input.subscribe((event: UploadInput) => {\n      switch (event.type) {\n        case 'uploadFile':\n          const /** @type {?} */ uploadFileIndex = this.queue.findIndex(file => file === event.file);\n          if (uploadFileIndex !== -1 && event.file) {\n            this.uploadScheduler.next({ file: this.queue[uploadFileIndex], event: event });\n          }\n        break;\n        case 'uploadAll':\n          const /** @type {?} */ files = this.queue.filter(file => file.progress.status === UploadStatus.Queue);\n          files.forEach(file => this.uploadScheduler.next({ file: file, event: event }));\n        break;\n        case 'cancel':\n          const /** @type {?} */ id = event.id || null;\n          if (!id) {\n            return;\n          }\n\n          const /** @type {?} */ index = this.subs.findIndex(sub => sub.id === id);\n          if (index !== -1 && this.subs[index].sub) {\n            this.subs[index].sub.unsubscribe();\n\n            const /** @type {?} */ fileIndex = this.queue.findIndex(file => file.id === id);\n            if (fileIndex !== -1) {\n              this.queue[fileIndex].progress.status = UploadStatus.Cancelled;\n              this.serviceEvents.emit({ type: 'cancelled', file: this.queue[fileIndex] });\n            }\n          }\n        break;\n        case 'cancelAll':\n          this.subs.forEach(sub => {\n            if (sub.sub) {\n              sub.sub.unsubscribe();\n            }\n\n            const /** @type {?} */ file = this.queue.find(uploadFile => uploadFile.id === sub.id);\n            if (file) {\n              file.progress.status = UploadStatus.Cancelled;\n              this.serviceEvents.emit({ type: 'cancelled', file: file });\n            }\n          });\n        break;\n        case 'remove':\n          if (!event.id) {\n            return;\n          }\n\n          const /** @type {?} */ i = this.queue.findIndex(file => file.id === event.id);\n          if (i !== -1) {\n            const /** @type {?} */ file = this.queue[i];\n            this.queue.splice(i, 1);\n            this.serviceEvents.emit({ type: 'removed', file: file });\n          }\n        break;\n        case 'removeAll':\n          if (this.queue.length) {\n            this.queue = [];\n            this.serviceEvents.emit({ type: 'removedAll' });\n          }\n        break;\n      }\n    });\n  }\n/**\n * @param {?} upload\n * @return {?}\n */\nstartUpload(upload: { file: UploadFile, event: UploadInput }): Observable<UploadOutput> {\n    return new Observable(observer => {\n      const /** @type {?} */ sub = this.uploadFile(upload.file, upload.event)\n        .subscribe(output => {\n          observer.next(output);\n        }, err => {\n          observer.error(err);\n          observer.complete();\n        }, () => {\n          observer.complete();\n        });\n\n      this.subs.push({ id: upload.file.id, sub: sub });\n    });\n  }\n/**\n * @param {?} file\n * @param {?} event\n * @return {?}\n */\nuploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {\n    return new Observable(observer => {\n      const /** @type {?} */ url = event.url || '';\n      const /** @type {?} */ method = event.method || 'POST';\n      const /** @type {?} */ data = event.data || {};\n      const /** @type {?} */ headers = event.headers || {};\n\n      const /** @type {?} */ xhr = new XMLHttpRequest();\n      const /** @type {?} */ time: number = new Date().getTime();\n      let /** @type {?} */ progressStartTime: number = (file.progress.data && file.progress.data.startTime) || time;\n      let /** @type {?} */ speed = 0;\n      let /** @type {?} */ eta: number | null = null;\n\n      xhr.upload.addEventListener('progress', (e: ProgressEvent) => {\n        if (e.lengthComputable) {\n          const /** @type {?} */ percentage = Math.round((e.loaded * 100) / e.total);\n          const /** @type {?} */ diff = new Date().getTime() - time;\n          speed = Math.round(e.loaded / diff * 1000);\n          progressStartTime = (file.progress.data && file.progress.data.startTime) || new Date().getTime();\n          eta = Math.ceil((e.total - e.loaded) / speed);\n\n          file.progress = {\n            status: UploadStatus.Uploading,\n            data: {\n              percentage: percentage,\n              speed: speed,\n              speedHuman: `${humanizeBytes(speed)}/s`,\n              startTime: progressStartTime,\n              endTime: null,\n              eta: eta,\n              etaHuman: this.secondsToHuman(eta)\n            }\n          };\n\n          observer.next({ type: 'uploading', file: file });\n        }\n      }, false);\n\n      xhr.upload.addEventListener('error', (e: Event) => {\n        observer.error(e);\n        observer.complete();\n      });\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          const /** @type {?} */ speedAverage = Math.round(file.size / (new Date().getTime() - progressStartTime) * 1000);\n          file.progress = {\n            status: UploadStatus.Done,\n            data: {\n              percentage: 100,\n              speed: speedAverage,\n              speedHuman: `${humanizeBytes(speedAverage)}/s`,\n              startTime: progressStartTime,\n              endTime: new Date().getTime(),\n              eta: eta,\n              etaHuman: this.secondsToHuman(eta || 0)\n            }\n          };\n\n          file.responseStatus = xhr.status;\n\n          try {\n            file.response = JSON.parse(xhr.response);\n          } catch ( /** @type {?} */e) {\n            file.response = xhr.response;\n          }\n\n          file.responseHeaders = this.parseResponseHeaders(xhr.getAllResponseHeaders());\n\n          observer.next({ type: 'done', file: file });\n\n          observer.complete();\n        }\n      };\n\n      xhr.open(method, url, true);\n      xhr.withCredentials = event.withCredentials ? true : false;\n\n      try {\n        const /** @type {?} */ uploadFile = /** @type {?} */(( <BlobFile>file.nativeFile));\n        const /** @type {?} */ uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);\n\n        if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {\n          observer.complete();\n        }\n\n        Object.keys(data).forEach(key => file.form.append(key, data[key]));\n        Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\n\n        file.form.append(event.fieldName || 'file', uploadFile, uploadFile.name);\n\n        this.serviceEvents.emit({ type: 'start', file: file });\n        xhr.send(file.form);\n      } catch ( /** @type {?} */e) {\n        observer.complete();\n      }\n\n      return () => {\n        xhr.abort();\n      };\n    });\n  }\n/**\n * @param {?} sec\n * @return {?}\n */\nsecondsToHuman(sec: number): string {\n    return new Date(sec * 1000).toISOString().substr(11, 8);\n  }\n/**\n * @return {?}\n */\ngenerateId(): string {\n    return Math.random().toString(36).substring(7);\n  }\n/**\n * @param {?} contentTypes\n * @return {?}\n */\nsetContentTypes(contentTypes: string[]): void {\n    if ( typeof contentTypes != 'undefined' && contentTypes instanceof Array ) {\n      if (contentTypes.find((type: string) => type === '*') !== undefined) {\n        this.contentTypes = ['*'];\n      } else {\n        this.contentTypes = contentTypes;\n      }\n      return;\n    }\n    this.contentTypes = ['*'];\n  }\n/**\n * @return {?}\n */\nallContentTypesAllowed(): boolean {\n    return this.contentTypes.find((type: string) => type === '*') !== undefined;\n  }\n/**\n * @param {?} mimetype\n * @return {?}\n */\nisContentTypeAllowed(mimetype: string): boolean {\n    if (this.allContentTypesAllowed()) {\n      return true;\n    }\n    return this.contentTypes.find((type: string) => type === mimetype) !== undefined;\n  }\n/**\n * @param {?} file\n * @param {?} index\n * @return {?}\n */\nmakeUploadFile(file: File, index: number): UploadFile {\n    return {\n      fileIndex: index,\n      id: this.generateId(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      form: new FormData(),\n      progress: {\n        status: UploadStatus.Queue,\n        data: {\n          percentage: 0,\n          speed: 0,\n          speedHuman: `${humanizeBytes(0)}/s`,\n          startTime: null,\n          endTime: null,\n          eta: null,\n          etaHuman: null\n        }\n      },\n      lastModifiedDate: file.lastModifiedDate,\n      sub: undefined,\n      nativeFile: file\n    };\n  }\n/**\n * @param {?} httpHeaders\n * @return {?}\n */\nprivate parseResponseHeaders(httpHeaders: ByteString) {\n    if (!httpHeaders) {\n      return;\n    }\n    return httpHeaders.split('\\n')\n      .map(x => x.split(/: */, 2))\n      .filter(x => x[0])\n      .reduce((ac, x) => {\n        ac[x[0]] = x[1];\n        return ac;\n      }, {});\n  }\n}\n\nfunction NgUploaderService_tsickle_Closure_declarations() {\n/** @type {?} */\nNgUploaderService.prototype.queue;\n/** @type {?} */\nNgUploaderService.prototype.serviceEvents;\n/** @type {?} */\nNgUploaderService.prototype.uploadScheduler;\n/** @type {?} */\nNgUploaderService.prototype.subs;\n/** @type {?} */\nNgUploaderService.prototype.contentTypes;\n}\n\n","import { Subscription } from 'rxjs/Subscription';\n\nexport interface UploaderOptions {\n  concurrency: number;\n  allowedContentTypes?: string[];\n}\n\nexport interface BlobFile extends Blob {\n  name: string;\n}\nexport type UploadStatus = number;\nexport let UploadStatus: any = {};\nUploadStatus.Queue = 0;\nUploadStatus.Uploading = 1;\nUploadStatus.Done = 2;\nUploadStatus.Cancelled = 3;\nUploadStatus[UploadStatus.Queue] = \"Queue\";\nUploadStatus[UploadStatus.Uploading] = \"Uploading\";\nUploadStatus[UploadStatus.Done] = \"Done\";\nUploadStatus[UploadStatus.Cancelled] = \"Cancelled\";\n\n\nexport interface UploadProgress {\n  status: UploadStatus;\n  data?: {\n    percentage: number;\n    speed: number;\n    speedHuman: string;\n    startTime: number | null;\n    endTime: number | null;\n    eta: number | null;\n    etaHuman: string | null;\n  };\n}\n\nexport interface UploadFile {\n  id: string;\n  fileIndex: number;\n  lastModifiedDate: Date;\n  name: string;\n  size: number;\n  type: string;\n  form: FormData;\n  progress: UploadProgress;\n  response?: any;\n  responseStatus?: number;\n  sub?: Subscription | any;\n  nativeFile?: File;\n  responseHeaders?: { [key: string]: string };\n}\n\nexport interface UploadOutput {\n  type: 'addedToQueue' | 'allAddedToQueue' | 'uploading' | 'done' | 'start' | 'cancelled' | 'dragOver'\n      | 'dragOut' | 'drop' | 'removed' | 'removedAll' | 'rejected';\n  file?: UploadFile;\n  nativeFile?: File;\n}\n\nexport interface UploadInput {\n  type: 'uploadAll' | 'uploadFile' | 'cancel' | 'cancelAll' | 'remove' | 'removeAll';\n  url?: string;\n  method?: string;\n  id?: string;\n  fieldName?: string;\n  fileIndex?: number;\n  file?: UploadFile;\n  data?: { [key: string]: string | Blob };\n  headers?: { [key: string]: string };\n  withCredentials?: boolean;\n}\n"],"names":["Observable","Subject"],"mappings":"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"}
